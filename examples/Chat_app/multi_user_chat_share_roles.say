Start Ritual:
    string banner = "=== Sayit Multi-User Chat + File Share (Roles + Permissions) ==="
    print(banner)
    print("Commands: join [room], chat, sendfile, getfile, dm [user], who, status [msg], broadcast [msg], role [user] [role], kick [user], quit")
    print("Roles: admin, moderator, user. Only admins can broadcast or assign roles.")
    end()

Make:
    current_room = ""
    username = ""
    role = "user"
    known_updates = {}
    known_dms = {}
    user_status = "Available"

# Ask for username
_arg_prompt = "Enter your username: "
input_line()
username = _out_input
print("Welcome, " + username + "!")

# Check roles file (admins already listed?)
_arg_path = "roles.txt"
import_file()
rolelist = _out_imported_source
If not contains(rolelist, username):
    # Default new user = user
    _arg_path = "roles.txt"
    _arg_data = username + ":user\n"
    append_file()
    role = "user"
Else:
    role = parse_role(rolelist, username)

print("Your role is: " + role)

# Add user to presence
get_time()
ts = _out_time
_arg_path = "presence.txt"
_arg_data = username + " (online since " + ts + ") [" + user_status + "] {" + role + "}\n"
append_file()

While true:
    # Notifications for rooms
    rooms_list = ["general", "dev", "music"]
    For room in rooms_list:
        _arg_path = room + "_messages.txt"
        import_file()
        log = _out_imported_source
        count = line_count(log)

        If known_updates[room] < count:
            new_count = count - known_updates[room]
            print("ðŸ”” [" + room + "] " + str(new_count) + " new message(s)/file(s).")
            known_updates[room] = count

    # Notifications for DMs
    _arg_path = "dm_" + username + ".txt"
    import_file()
    dm_log = _out_imported_source
    dm_count = line_count(dm_log)

    If known_dms[username] < dm_count:
        new_dm_count = dm_count - known_dms[username]
        print("ðŸ’Œ You have " + str(new_dm_count) + " new direct message(s).")
        known_dms[username] = dm_count

    # Command loop
    _arg_prompt = "Command: "
    input_line()
    cmd = _out_input

    # Quit â†’ mark last seen
    If cmd == "quit":
        get_time()
        ts = _out_time

        _arg_path = "presence.txt"
        import_file()
        lines = _out_imported_source

        new_lines = remove_line(lines, username)
        new_lines = new_lines + username + " (last seen at " + ts + ") [" + user_status + "] {" + role + "}\n"

        _arg_data = new_lines
        export_file()

        print("Goodbye " + username + "!")
        break

    # Who command
    Elif cmd == "who":
        _arg_path = "presence.txt"
        import_file()
        print("=== Active Users + Last Seen + Status + Role ===")
        print(_out_imported_source)

    # Status update
    Elif cmd startswith "status ":
        user_status = cmd[7:]
        get_time()
        ts = _out_time

        _arg_path = "presence.txt"
        import_file()
        lines = _out_imported_source
        new_lines = remove_line(lines, username)
        new_lines = new_lines + username + " (online since " + ts + ") [" + user_status + "] {" + role + "}\n"
        _arg_data = new_lines
        export_file()

        print("âœ… Status updated to: " + user_status)

    # Broadcast â†’ only admins
    Elif cmd startswith "broadcast ":
        If role != "admin":
            print("â›” Permission denied: Only admins can broadcast.")
        Else:
            msg = cmd[10:]
            get_time()
            ts = _out_time

            For room in rooms_list:
                _arg_path = room + "_messages.txt"
                _arg_data = "[BROADCAST by " + username + " | " + ts + "] " + msg + "\n"
                append_file()

            _arg_path = "presence.txt"
            import_file()
            pres = _out_imported_source
            users = parse_users(pres)
            For u in users:
                _arg_path = "dm_" + u + ".txt"
                _arg_data = "[BROADCAST by " + username + " | " + ts + "] " + msg + "\n"
                append_file()

            print("ðŸ“¢ Broadcast sent to all rooms + users.")

    # Role assignment â†’ only admins
    Elif cmd startswith "role ":
        If role != "admin":
            print("â›” Permission denied: Only admins can assign roles.")
        Else:
            parts = split(cmd, " ")
            target = parts[1]
            newrole = parts[2]

            _arg_path = "roles.txt"
            import_file()
            lines = _out_imported_source
            new_lines = remove_line(lines, target)
            new_lines = new_lines + target + ":" + newrole + "\n"
            _arg_data = new_lines
            export_file()

            print("âœ… " + target + " is now a " + newrole + ".")

    # Kick user â†’ admins or moderators
    Elif cmd startswith "kick ":
        If role == "admin" or role == "moderator":
            target = cmd[5:]

            _arg_path = "presence.txt"
            import_file()
            lines = _out_imported_source
            new_lines = remove_line(lines, target)
            _arg_data = new_lines
            export_file()

            print("ðŸ‘¢ " + target + " has been kicked (removed from presence).")
        Else:
            print("â›” Permission denied: Only admins or moderators can kick.")

    # Normal room join/chat/dm/file commands (same as before) ...
    # (shortened here for clarity but keep full versions)

    Else:
        print("Unknown command. Try: join [room], chat, sendfile, getfile, dm [user], status [msg], broadcast [msg], role [user] [role], kick [user], who, quit")
