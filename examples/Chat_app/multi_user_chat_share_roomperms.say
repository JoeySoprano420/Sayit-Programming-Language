Start Ritual:
    string banner = "=== Sayit Multi-User Chat + File Share (Room Permissions) ==="
    print(banner)
    print("Commands: join [room], chat, sendfile, getfile, dm [user], who, status [msg], broadcast [msg], role [user] [role], kick [user], ban [user], unban [user], invite [user] [room], quit")
    print("Room types: admin-only, read-only, invite-only, or normal.")
    end()

Make:
    current_room = ""
    username = ""
    role = "user"
    known_updates = {}
    known_dms = {}
    user_status = "Available"

# Ask username
_arg_prompt = "Enter your username: "
input_line()
username = _out_input

# Check ban list
_arg_path = "banlist.txt"
import_file()
banned = _out_imported_source
If contains(banned, username):
    print("â›” Access denied. " + username + " is banned.")
    exit()

print("Welcome, " + username + "!")

# Role check
_arg_path = "roles.txt"
import_file()
rolelist = _out_imported_source
If not contains(rolelist, username):
    _arg_path = "roles.txt"
    _arg_data = username + ":user\n"
    append_file()
    role = "user"
Else:
    role = parse_role(rolelist, username)

print("Your role is: " + role)

# Add to presence
get_time()
ts = _out_time
_arg_path = "presence.txt"
_arg_data = username + " (online since " + ts + ") [" + user_status + "] {" + role + "}\n"
append_file()

# Room permissions file
# Format: room:type (types = admin, readonly, invite)
# Example:
# adminroom:admin
# announcements:readonly
# secrets:invite
_arg_path = "roomperms.txt"
import_file()
room_perms = _out_imported_source

# Invite list file
# Format: room:user
_arg_path = "invites.txt"
import_file()
invites = _out_imported_source

While true:
    # Notifications for rooms
    rooms_list = ["general", "dev", "music", "adminroom", "announcements", "secrets"]
    For room in rooms_list:
        _arg_path = room + "_messages.txt"
        import_file()
        log = _out_imported_source
        count = line_count(log)

        If known_updates[room] < count:
            new_count = count - known_updates[room]
            print("ðŸ”” [" + room + "] " + str(new_count) + " new message(s)/file(s).")
            known_updates[room] = count

    # Notifications for DMs
    _arg_path = "dm_" + username + ".txt"
    import_file()
    dm_log = _out_imported_source
    dm_count = line_count(dm_log)

    If known_dms[username] < dm_count:
        new_dm_count = dm_count - known_dms[username]
        print("ðŸ’Œ You have " + str(new_dm_count) + " new direct message(s).")
        known_dms[username] = dm_count

    # Command loop
    _arg_prompt = "Command: "
    input_line()
    cmd = _out_input

    # Quit
    If cmd == "quit":
        get_time()
        ts = _out_time

        _arg_path = "presence.txt"
        import_file()
        lines = _out_imported_source
        new_lines = remove_line(lines, username)
        new_lines = new_lines + username + " (last seen at " + ts + ") [" + user_status + "] {" + role + "}\n"
        _arg_data = new_lines
        export_file()

        print("Goodbye " + username + "!")
        break

    # Who
    Elif cmd == "who":
        _arg_path = "presence.txt"
        import_file()
        print("=== Active Users + Last Seen + Status + Role ===")
        print(_out_imported_source)

    # Join room
    Elif cmd startswith "join ":
        target_room = cmd[5:]
        perm = get_room_perm(room_perms, target_room)

        If perm == "admin" and role != "admin":
            print("â›” Access denied: " + target_room + " is admin-only.")
        Elif perm == "invite" and not in_invites(invites, target_room, username) and role == "user":
            print("â›” Access denied: " + target_room + " is invite-only.")
        Else:
            current_room = target_room
            print("Joined room: " + current_room)
            _arg_path = current_room + "_messages.txt"
            import_file()
            print("=== " + current_room + " Chat History ===")
            print(_out_imported_source)
            known_updates[current_room] = line_count(_out_imported_source)

    # Chat
    Elif cmd == "chat":
        If current_room == "":
            print("Join a room first with: join [roomname]")
        Else:
            perm = get_room_perm(room_perms, current_room)
            If perm == "readonly" and role == "user":
                print("â›” This room is read-only for regular users.")
            Else:
                While true:
                    print("..." + username + " is typing in " + current_room + " ...")

                    _arg_prompt = "[" + username + "@" + current_room + "] Message: "
                    input_line()
                    msg = _out_input

                    If msg == "back":
                        break

                    get_time()
                    ts = _out_time

                    _arg_path = current_room + "_messages.txt"
                    _arg_data = "[" + username + " | " + ts + "] " + msg + "\n"
                    append_file()

                    _arg_path = current_room + "_messages.txt"
                    import_file()
                    print("=== " + current_room + " Chat Log ===")
                    print(_out_imported_source)

                    known_updates[current_room] = line_count(_out_imported_source)

    # Invite users (admin/mods)
    Elif cmd startswith "invite ":
        parts = split(cmd, " ")
        target_user = parts[1]
        target_room = parts[2]
        If role == "admin" or role == "moderator":
            _arg_path = "invites.txt"
            _arg_data = target_room + ":" + target_user + "\n"
            append_file()
            print("âœ… " + target_user + " invited to " + target_room + ".")
        Else:
            print("â›” Permission denied: Only admins or moderators can invite.")

    # Other commands: status, dm, sendfile, getfile, broadcast, role, kick, ban, unban...
    # (same as previous program, integrated with role checks)

    Else:
        print("Unknown command. Try: join [room], chat, sendfile, getfile, dm [user], status [msg], broadcast [msg], role [user] [role], kick [user], ban [user], unban [user], invite [user] [room], who, quit")
